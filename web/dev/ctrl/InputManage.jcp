/*
 * @(#)/	1.0.0 2003/08/12
 *
 * Copyright 2001 Bizdict Co.,Ltd. All rights reserved.
 *
 * 主程序作者：
 * @author tianzhou
 *
 *
 * 修改者:tianzhou
 * 修改日期:2008.4.7
 * 修改理由:升级至Ext
 * 
 * 修改者:tianzhou
 * 修改日期:2008.7.15
 * 修改理由:将操作由直接访问数据库到访问类库
 *
 *
 * 修改者:lhf
 * 修改日期:2008.8.5
 * 修改理由:改由服务器端控制显示类型
	1、把返回报告等改为二维数组
	2、增加智能折行
	3、修复拖动排序
	4、改表结构.控件分为控件类型与控件参数
 *
 *
 * 修改者:tz
 * 修改日期:2009.1.12
 * 修改理由:改进和修正bug
	1、导入参数返回值由9999修改为-2,减少后台工作量
	2、Reference时控件关联的问题
 * *

  * 修改者:tz
 * 修改日期:2009.7.6
 * 修改理由:
	1、把选择用户控件，选择部门控件，选择框控件的默认定为只读
 * *
   * 修改者:tz
 * 修改日期:2010.1.15
 * 修改理由:
	1、支持主题录入
 */


import java.util.HashSet;
import java.util.ArrayList;
import java.io.*;
import com.kinglib.util.*;
import com.kinglib.Connection;
import com.kinglib.HttpSession;
import com.kinglib.Jacper;
import com.kinglib.database.DataType;
import com.kinglib.database.MetaColumn;
import com.kinglib.database.MetaFactory;
import com.kinglib.database.Constraint;
import com.kinglib.database.MetaTable;
import com.kinglib.database.Constraint;
import com.kinglib.database.ConstraintType;
import com.kinglib.database.SpecialSet;
import com.kinglib.ui.core.utils.CtrlType;
import com.kinglib.ui.core.utils.CtrlTypeDivider;
import com.kinglib.ui.core.utils.CtrlEvent;
import com.kinglib.ui.core.utils.Param;
import com.kinglib.util.json.JSONArray;
import com.kinglib.util.json.JSONValue;
import com.kinglib.util.json.JSONException;
import com.kinglib.util.json.JSONObject;
import com.kinglib.workbench.ObjectManager;
import com.kinglib.workbench.ObjectNode;
import com.kinglib.workbench.ObjectType;
import com.kinglib.workbench.program.ProgramFactory;
import com.kinglib.workbench.program.Program;
import com.kinglib.workbench.widget.WidgetFactory;
import com.kinglib.workbench.widget.Widget;
import com.kinglib.ui.core.CustomizeFactory;
import com.kinglib.workbench.quality.*;
import com.kinglib.bi.*;
import com.kinglib.ui.program.RichEditorAssistant;

@class{

	public void doDelete(Jacper jacper){
			Param param=new Param(jacper);
			String objectId=param.getStr("objectId");
			Connection conPlat = param.getConnection("plat");

			String[] tabId= getTableId(conPlat,objectId,param.getString("subFlag"));
			try{
				if(tabId[1].equals("21")){//主题录入
					conPlat.exec("delete from $[plat].ctrl_input where object_id=?",
						new String[] { objectId});
				}else{
					conPlat.exec("delete from $[plat].ctrl_input where object_id=? and tab_id=?",
						new String[] { objectId,tabId[0]});
				}
				jacper.print("{success:true}");
			}catch(Exception e){
				jacper.print("{success:false,message:'"+e.getMessage()+"'}");
			}finally{
				conPlat.close();
			}
	}

	private String[] getTableId(Connection conPlat,String object_id,String subFlag){
		ObjectNode node = ObjectManager.getObject(object_id);
		int prgType=0;
		String tabId = "0";
		String queryId1="0";
		String queryId2="0";
		if (node.getType() == ObjectType.PROGRAM){
			Program prg=ProgramFactory.getInstance().getProgram(conPlat,
					node.getId());
			if(subFlag!=null){
				tabId =prg.getSecondTabId();
			}else{
				tabId =prg.getTabId();
			}
			prgType=prg.getType();
			queryId1=prg.getQueryId();  
			queryId2=prg.getSecondQueryId();
		}else if (node.getType() == ObjectType.WIDGET){
			Widget wid= WidgetFactory.getWidget(conPlat, node.getId());
			if(subFlag!=null){
				tabId =wid.getTab2Id();
			}else{
				tabId =wid.getTab1Id();
			}
		}else if (node.getType() == ObjectType.METATABLE){
				tabId =object_id;
		}
		return new String[]{tabId,prgType+"",queryId1,queryId2};
	}

	public void doGet(Jacper jacper) {
		boolean isLogin = jacper.setSession();
		HttpSession hs = jacper.getSession();
		String object_id = jacper.getStr("object_id");
		Connection conPlat = jacper.getConnection("plat");
//tz-begin最后将各个ProgramFactory合并时改为查表.
		String[] tps=getTableId(conPlat,object_id,jacper.getString("subFlag"));
//tz-end		
		String prgType=tps[1];    
		String tabId = tps[0];

		String[][] rows =null;
		if(prgType.equals("21")){//主题录入
			 rows =conPlat.get(
						"select TABITEM_ID, CTRL_TYPE, MAX_LENGTH, WIDTH, WRAP_FLAG, ROW_INDEX, TAB_ID, OBJECT_ID, LINK_widget, HIDE_FLAG, readonly_flag, PLUS, TITLE, ANNOTATION, QUERY_ID, QUERY_COLUMN, MIN_LENGTH, TEXTREPORT_ID, REGEX, REGEXTEXT,default_value,option_id,height,extend_attributes from $[plat].CTRL_INPUT where OBJECT_ID=?  order by row_index",
						new String[] { object_id }, 0);
		}else{
			 rows =conPlat.get(
						"select TABITEM_ID, CTRL_TYPE, MAX_LENGTH, WIDTH, WRAP_FLAG, ROW_INDEX, TAB_ID, OBJECT_ID, LINK_widget, HIDE_FLAG, readonly_flag, PLUS, TITLE, ANNOTATION, QUERY_ID, QUERY_COLUMN, MIN_LENGTH, TEXTREPORT_ID, REGEX, REGEXTEXT,default_value,option_id,height,extend_attributes from $[plat].CTRL_INPUT where OBJECT_ID=? and tab_id=? order by row_index",
						new String[] { object_id ,tabId}, 0);
		}
		boolean isNew = rows.length == 0;
		MetaTable mt = MetaFactory.getObject(tabId);
		if(mt==null){
			jacper.print("{success:false,message:'"+jacper.trans("系统未找到表")+"'"+tabId+"}");
			return;
		}
		try {
			MetaColumn col = null;
			String[] r = null;
			JSONArray jarr = new JSONArray();
			HashSet<MetaColumn> shown = new HashSet<MetaColumn>(rows.length);
			for (String[] row : rows) {
				col = MetaFactory.getColumn(row[6],row[0]);
				if(col==null) continue;
				shown.add(col);
				if(!row[15].equals(""))
					row[8]=row[15];
				jarr.put(this.getJSONObject(col, row, true));
				
			}
			int i = jarr.length();
			MetaColumn[] cols=mt.getColumnArray();
			
			if(prgType.equals("21")){
				Program prg=ProgramFactory.getInstance().getProgram(conPlat,object_id);
				String[] tables=prg.getTables().split(",");    
				ArrayList<MetaColumn> arr=new ArrayList<MetaColumn>();
				for(int k=0;k<tables.length;k++){
					try{
						MetaTable mta = MetaFactory.getMetaTable(tables[k]);
						if(mta!=null){
							for(MetaColumn c : mta.getColumns()){
								arr.add(c);
							}
						}
					}catch(Exception e){}
				}
				cols=arr.toArray(new MetaColumn[arr.size()]);
			}

			for (MetaColumn c : cols) { 
				if (!shown.contains(c)) {
					String isHidden="false";
					if(prgType.equals("21")){
						if(c.getObjectId()!=tabId && c.isPrimaryKey()) {
							isHidden="true";
						}
					}
					r = new String[] { String.valueOf(c.getId()), "0",
							String.valueOf(c.getLength()), "200",
							String.valueOf(i % 2 == 1), String.valueOf(i),
							String.valueOf(c.getObjectId()), object_id, "", isHidden,
							"false", "", c.getLname(), "", "", "", "0", "", "","" ,"" ,"","",""};
					rowOptimize(jacper,c,r);	
					jarr.put(this.getJSONObject(c, r, isNew));
				}
			}

			boolean wrap = isNew
					|| jarr.getJSONObject(i - 1).getBoolean("wrap_flag");
			
			for (int width = 0; i < jarr.length(); i++) {
				width = jarr.getJSONObject(i).getInt("width");
				if(jarr.getJSONObject(i).getString("hide_flag").equals("true")){
					jarr.getJSONObject(i).put("wrap_flag", false);
					continue;
				}
				if(width>400 && i>0){
					jarr.getJSONObject(i).put("wrap_flag", true);
				}
				wrap = (width > 400) || !wrap;
				jarr.getJSONObject(i).put("wrap_flag", wrap);
			}
			jarr.getJSONObject(i-1).put("wrap_flag", true);
			JSONValue queryArr=null;
			if ((Strings.isNumeric(tps[2])&&Integer.parseInt(tps[2])>0)||(!Strings.isNumeric(tps[2]))){
				try{
					QueryExtend qe=QueryExtendFactory.getInstance().getQueryExtend(conPlat,tps[2]);
					if(qe!=null){
						StringBuilder sb=new StringBuilder();
						sb.append("[");
						String[] cells=qe.getQuery().getCells();
						if ((Strings.isNumeric(tps[3])&&Integer.parseInt(tps[3])>0)||(!Strings.isNumeric(tps[3]))){
							QueryExtend qe2=QueryExtendFactory.getInstance().getQueryExtend(conPlat,tps[3]);
							if(qe2!=null){
								//此处还需要改,带查询名称.--tz
								String[] scells=qe2.getQuery().getCells();
								String[] tcells=new String[scells.length+cells.length];
								System.arraycopy(cells,0,tcells,0,cells.length);
								System.arraycopy(scells,0,tcells,cells.length,scells.length);
								cells=tcells;
							}
						}
						for(int m=0;m<cells.length;m++){
							if(m>0)
								sb.append(",");
							sb.append("[\"").append(cells[m]).append("\",\"").append(cells[m]).append("\"]");
						}
						queryArr=new JSONValue(sb.append("]").toString());
					}
				}catch(Exception e){e.printStackTrace();}
			}

			for(i=0;i<jarr.length();i++){
				JSONObject j=jarr.getJSONObject(i);
				MetaColumn mc=MetaFactory.getColumn(j.getString("tab_id"),j.getString("tabitem_id"));
				j.put("res",getWidgetType(jacper,conPlat,mc,queryArr,object_id));
			}
			
			//如果不在列表界面中出现的编辑器全部隐藏---用处值得商榷--tz
			if(isNew && (prgType.equals("3") || prgType.equals("13"))){
				String[][] rss=conPlat.get("select list_item from $[plat].ctrl_lst where module_id=?",new String[]{object_id},0);
				if(rss!=null && rss.length>0){
					HashSet<String> mhs=new HashSet<String>();
					HashSet<JSONObject> chs=new HashSet<JSONObject>();
					for(String[] rc:rss)  
						mhs.add(rc[0]);
					JSONArray ja=new JSONArray(); 
					for(i=0;i<jarr.length();i++){
						JSONObject j=jarr.getJSONObject(i);
						if(mhs.contains(j.getString("tabitem_id")) || j.getString("link_widget").equals("-2")){
							j.put("edit_flag",true);
							ja.put(j);
						}else{
							j.put("edit_flag",false);
							chs.add(j);
						}
					}
					for(JSONObject j:chs){
						ja.put(j);
					}
					jarr=ja;
				}

			}


			JSONObject ret = new JSONObject("{success:true}");
			ret.put("items", jarr);
			jacper.print(ret.toString());
			/*FileWriter fw=new FileWriter("c:\\inputManage.js");
			fw.write(ret.toString());
			fw.close();*/
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			conPlat.close();
		}
	}

	public void doPost(Jacper jacper) {
		Connection conPlat = jacper.getConnection("plat");
		String object_id = jacper.getStr("object_id");
		String fields = jacper.getStr("fields");
		String objectType = jacper.getStr("objectType");
		
		if (fields.equals(""))
			return;
		try {
			conPlat.setAutoCommit(false);
			JSONArray jarr = new JSONArray(fields); 
			if(jarr.length()<1 || objectType.equals("21")){
				conPlat.exec("delete from $[plat].ctrl_input where object_id=?",
						new String[] { object_id});
			}else{
				String tab_id=jarr.getJSONObject(0).getString("tab_id");
				conPlat.exec("delete from $[plat].ctrl_input where object_id=? and tab_id=?",
						new String[] { object_id,tab_id });
			}
			
			
			
			String linkWidget = "",ctrlType="",tabId="";
			boolean hasRichEditor=false;
			for (int i = 0; i < jarr.length(); i++) {
				JSONObject js = jarr.getJSONObject(i);
				ctrlType=js.getString("ctrl_type");
				linkWidget=js.getString("link_widget");
				if(ctrlType.equals("21")){
					js.put("query_column",linkWidget);
					linkWidget="";
				}
				
				tabId=js.getString("tab_id");
				if(ctrlType.equals("6")){
					hasRichEditor=true;
				}
				
				if(linkWidget.equals(jacper.trans("无")))
					linkWidget="";

				String wrapFlag=js.getString("wrap_flag");
                if(objectType.equals("3")||objectType.equals("12")||objectType.equals("13"))
					wrapFlag="false";
				conPlat
						.exec(
								"insert into $[plat].ctrl_input (tab_id,tabitem_id, ctrl_type, max_length, width,  row_index,object_id,LINK_WIDGET,hide_flag,readonly_flag,title,query_id,query_column,wrap_flag,min_length,textreport_id,annotation,regex,regexText,height,extend_attributes,default_value,option_id) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
								new String[] { tabId,
										js.getString("tabitem_id"),
										ctrlType,js.getString("max_length"),
										js.getString("width"),
										String.valueOf(i), object_id,
										linkWidget, js.getString("hide_flag"),
										js.getString("readonly_flag"),
										js.getString("title"),
										js.getString("query_id"),
										js.getString("query_column"),
										wrapFlag,
										js.getString("min_length"),
										js.getString("textreport_id"),
										js.getString("annotation"),
										js.getString("regex"),
										js.getString("regexText"),
										js.getString("height"),
										js.getString("extendAttributes"),
										js.getString("default_value"),
										js.getString("option_id")});

			}
			conPlat.commit();
			
			RichEditorAssistant re=new RichEditorAssistant();
			re.syncFileTable(jacper, tabId,hasRichEditor);
			
			
		} catch (Exception e) {
			try {
				conPlat.rollback();
			} catch (Exception ecc) {
			}
			e.printStackTrace();
		} finally {
			try {
				conPlat.setAutoCommit(true);
			} catch (Exception ecc) {
			}
			conPlat.close();
			ObjectNode node = ObjectManager.getObject(object_id);
			if (node.getType() == ObjectType.PROGRAM){
				ProgramFactory.getInstance().remove(node.getId());
				CustomizeFactory.remove(node.getId());
			}else if (node.getType() == ObjectType.WIDGET){
				WidgetFactory.remove(node.getId());
				//com.kinglib.ui.widget.WidgetFactory.remove(object_id);
			}else if (node.getType() == ObjectType.METATABLE){
				QualityFactory.getInstance().remove(node.getId());
				//com.kinglib.ui.widget.WidgetFactory.remove(object_id);
			}
			
		}
		jacper.print("{success:true}");
	} 

	public String digitModel = "99999999999999999999999999999999999999";// 38位
	public String zeroModel = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";// 128位



	public String[] rowOptimize(Jacper jacper,MetaColumn c, String[] r) throws Exception {
		/*
			取第一种控件,如果第一种是viewField则取第二种控件
		*/
		ArrayList<CtrlType> list =new ArrayList<CtrlType>();
		ctd.allocate(new Param(jacper),c,list);
		if(list.size()>0){
			if(list.size()>1 && list.get(0)==CtrlType.ViewField){
				r[1] = String.valueOf(list.get(1).getValue());
			}else{
				r[1] = String.valueOf(list.get(0).getValue());
			}
		}else{
			r[1] = String.valueOf(CtrlType.TextField.getValue());
		}


		int len = c.getLength();
		SpecialSet sp=c.getSpecialSet();
		if(sp==SpecialSet.S || sp==SpecialSet.YYYY){
			r[3] = "120";
		}else if(sp==SpecialSet.YYYYMM || sp==SpecialSet.YYYYS){
			r[3] = "180";
		}else if(sp==SpecialSet.YYYYMMDDHHMMSS){
			r[3] = "450";
		}else if(sp==SpecialSet.SelectDeptID||sp==SpecialSet.SelectUserID){
			r[10] = "true";
		}else if(sp==SpecialSet.CreatorDeptID || sp==SpecialSet.CreatorUserID || sp==SpecialSet.OperatorUserID|| sp==SpecialSet.OperatorDeptID || sp==SpecialSet.OperatorDeptName  || sp==SpecialSet.CreatorDeptName || sp==SpecialSet.CreatorUserName || sp==SpecialSet.OperatorUserName || sp==SpecialSet.WorkflowSign){

			r[9] = "true";
			r[10] = "true";
			r[3] = "160";
		}else if(sp==SpecialSet.FileName || sp==SpecialSet.FileSize || sp==SpecialSet.FileType){
			r[9] = "true";
			r[10] = "true";
			r[3] = "180";						
		}else{
			DataType type=c.getDataType();
			if(type==DataType.INT){
				len = (len == 0) ? 8 : Math.min(len, digitModel.length());
				r[3] = String.valueOf(Math.min(len * 20, 200));
				r[2] = digitModel.substring(0, len);
				if(r[16].equals("0")) r[16]="";
			}else if(type==DataType.FLOAT){
				len = (len == 0) ? 10 : Math.min(len, digitModel.length());
				int dec = c.getDecimalDigits();
				dec = (dec == 0) ? 2 : Math.min(dec, zeroModel.length());
				r[3] = String.valueOf(Math.min((len + dec + 1) * 20, 200));
				
				if(len>dec){//oracle中Number类型的规则
					r[2] =digitModel.substring(0, len-dec)+"."+digitModel.substring(0, dec);
				}else{
					r[2] ="0."+zeroModel.substring(0, dec-len)+digitModel.substring(0, len);
				}
				
				if(r[16].equals("0")) r[16]="";
			}else if(type==DataType.DATE){
				if(r[2].equals("8") || r[2].equals("0")) r[2]="";
				r[3] = "150";
				if(r[16].equals("0")) r[16]="";
			}else if(type==DataType.CLOB || type==DataType.GEOMETRY){
				if(r[2].equals("16") || r[2].equals("0")) r[2]="";
				r[3] = "500";
			}else if(type==DataType.BLOB){
				if(r[2].equals("16") || r[2].equals("0")) r[2]="";
			}
		
		}
		//if (c.isPrimaryKey())
		//	r[10] = "true";
		return r;
	}

	public JSONObject getJSONObject(MetaColumn c, String[] col,
			boolean editFlag) throws JSONException {
		JSONObject jo = new JSONObject();
		jo.put("tab_id", col[6]);
		jo.put("edit_flag", c.isPrimaryKey() ? true : editFlag);
		jo.put("tabitem_id", col[0]);
		jo.put("title", col[12]);
		jo.put("data_type", c.getDataType().toString());
		jo.put("data_type_value", c.getDataType().getValue());
		jo.put("flength", c.getLength());
		jo.put("special_set", c.getSpecialSet().getValue());
		jo.put("max_length", col[2]);
		jo.put("ctrl_type", col[1]);
		jo.put("width", col[3]);
		jo.put("wrap_flag", col[4].equals("true"));
		jo.put("row_index", col[5]);
		jo.put("link_widget", col[8]);
		jo.put("hide_flag", col[9].equals("true"));
		jo.put("primary_key", c.isPrimaryKey());
		jo.put("readonly_flag", col[10].equals("true"));
		jo.put("query_id", col[14]);
		jo.put("query_column", col[15]);
		jo.put("decimaldigits", c.getDecimalDigits());
		jo.put("textreport_id", col[17]);
		jo.put("min_length", col[16]);
		jo.put("annotation", col[13]);
		jo.put("regex", col[18]);
		jo.put("regexText", col[19]);
		jo.put("default_value", col[20]);
		jo.put("option_id", col[21]);
		jo.put("height", col[22]);
		jo.put("extendAttributes", col[23]);
		jo.put("plus", col[11]);
		return jo;
	}

	CtrlTypeDivider ctd=new CtrlTypeDivider();
	public JSONObject getWidgetType(Jacper jacper,Connection conPlat,MetaColumn column,JSONValue queryColumn,String objectId)throws Exception{
		JSONObject widgetJS = new JSONObject();
		ArrayList<CtrlType> list =new ArrayList<CtrlType>();

		ctd.allocate(new Param(jacper),column,list);

		if (column.hasForeignKey()) {
			list.add(CtrlType.CustomCtrl);
			JSONArray ctrlJS = new JSONArray();
			String tabId = "";
			for (Constraint c : MetaFactory.getObject(column.getObjectId())
					.getForeignKeyAndReference()) {
				if (c.getColumnId() == column.getId()
						&& tabId.indexOf(c.getLinkTable()) == -1) {
					tabId += ",'"+c.getLinkTable() + "'";
				}
			}
			if (tabId.length() > 1) {
				tabId = tabId.substring(1);
				String rss[][] = conPlat.get(
						"select object_id,widgetlogic_name from $[plat].widget_base where tab1_id in ("
								+ tabId + ") ", null);

				for (int k = 0; k < rss.length; k++) {
					JSONArray ja = new JSONArray();
					ja.put(rss[k][0] + "");
					ja.put(rss[k][1]);
					ctrlJS.put(ja);
				}
			}
			widgetJS
					.put(String.valueOf(CtrlType.CustomCtrl.getValue()), ctrlJS);
		}

		if(column.getDataType()==DataType.CLOB){
			list.add(CtrlType.Report);
			ObjectNode pnode=ObjectManager.getObject(objectId);
			JSONArray reportJS = new JSONArray();
			if(pnode!=null){
				for(ObjectNode node:pnode.upTo(ObjectType.SYSTEM).findAllChildsByType(ObjectType.REPORT)){
					JSONArray ja = new JSONArray();
					ja.put(String.valueOf(node.getId()));
					ja.put(node.getName());
					reportJS.put(ja);
				}
			}
			widgetJS.put(String.valueOf(CtrlType.Report.getValue()),reportJS);
		}

		if(queryColumn!=null){
			list.add(CtrlType.ImportQuery);
			widgetJS.put(String.valueOf(CtrlType.ImportQuery.getValue()),queryColumn);
		}

		JSONArray js = new JSONArray();
		JSONArray ja = null;
		for(int i=0;i<list.size();i++){
			ja = new JSONArray();
			ja.put(list.get(i).getValue());
			ja.put(list.get(i).toString());
			js.put(ja);
		}
	
		JSONArray defaultJS = new JSONArray();
		ja = new JSONArray();
		ja.put("");
		ja.put(jacper.trans("无"));
		defaultJS.put(ja);
		if(column.hasForeignKey()){
			ja = new JSONArray();
			ja.put("-2");
			ja.put(jacper.trans("参数导入"));
			defaultJS.put(ja);
		}

		widgetJS.put("arr",js);
		widgetJS.put("defaultArr",defaultJS);
		return widgetJS;
	}
}