import com.kinglib.Connection;
import com.kinglib.HttpSession;
import com.kinglib.Jacper;
import com.kinglib.ui.core.CustomizeFactory;
import com.kinglib.ui.core.CustomizeObject;
import com.kinglib.ui.core.input.Input;
import com.kinglib.ui.core.utils.Param;

import gpra.filesystem.HWDefaultRunningQueue;
import gpra.filesystem.HWUnits;
import gpra.filesystem.space.HWSpaceFactory;
import gpra.filesystem.space.HWSpaceNode;
import gpra.filesystem.space.HWSpaceFactory.HWSessions;
import gpra.filesystem.task.HWTaskWork2PDF;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;
import java.util.UUID;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import com.susing.KingleServletRequest;

//public class HWFileupload{
@class{
	public void doPost(Jacper jacper){
		//System.out.println("文件上传开始>>>");
		HttpSession hs = jacper.getSession();
		if(HWUnits.isGuestUser(String.valueOf(hs.uid))){
			jacper.print("{'success':false,'message':'服务器无法获取您的登陆认证信息 , 请刷新页面重试或者选用其他浏览器已解决此问题。'}");
			return;
		}
		KingleServletRequest request = jacper.getRequest();
		Connection con = jacper.getConnection(HWUnits.HW_DBLINK);		  	    		
		DiskFileItemFactory factory = new DiskFileItemFactory();
		factory.setSizeThreshold(10240000);
		String base = HWTaskWork2PDF.basePath;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");// 可以方便地修改日期格式
		File file = new File(base);
		if (!(file.exists()))
			file.mkdirs();
		factory.setRepository(file);
		ServletFileUpload upload = new ServletFileUpload(factory);
		//upload.setFileSizeMax(10002400000L);	
		upload.setSizeMax(10002400000L);
		upload.setHeaderEncoding("UTF-8");
		
		Param p = new Param(jacper);
		p.put("jacper", jacper);
		p.put("local", con);
		try {
			Enumeration<String> parameterNames = request.getParameterNames();//使用枚举获取这个key-value对
			while (parameterNames.hasMoreElements()) {
				String key = parameterNames.nextElement().toString();
				p.put(key,URLDecoder.decode(jacper.getString(key),"utf-8"));
			}
		} catch (UnsupportedEncodingException e1) {
			e1.printStackTrace();
		}
		
/*		JSONObject fileinfoItems = null;//处理多文件上传
		try {
			fileinfoItems = new JSONObject(p.getStr("FILEINFOITEMS"));
		} catch (JSONException e1) {
			fileinfoItems = new JSONObject();
		}*/
		String objectId = jacper.getString("objectId", "");
		String CustomizeType = jacper.getString("programType" , "");
		String userCustomInfoName = p.getString("userCustomInfoName", "");
		
		try
		{
			List items = upload.parseRequest(request);
			String uuid = UUID.randomUUID().toString();
			String userId = p.getStr("userId");
			con.setAutoCommit(false);
			
			String spaceId = p.getString("SPACE_ID");
			if(spaceId==null || spaceId.equals("")){
				spaceId = (String) p.getFromSession(HWSessions.HW_BASE_SPACEID.name());	//空间id
			}
			
			
			//System.out.println("参数整理完成。");
			//循环上传文件列表。
			for (int i = 0; i < items.size(); ++i) {
				FileItem item = (FileItem)items.get(i);

				//竖表加值
				if ((!(item.isFormField())) && (item.getName().length() > 0)){ 
					if(userCustomInfoName.length() > 0)
						p.set("FILE_INFO_NAME", userCustomInfoName);//处理多文件上传 , 用户自定义文件名称
					if(!p.containsKey("FILE_INFO_NAME"))
						p.set("FILE_INFO_NAME", item.getName());
/*					if (fileinfoItems.length() > 1){//处理多文件上传
						String key = item.getName().replaceAll("\\s|\\.", "");
						p.set("FILE_INFO_NAME", fileinfoItems.has(key) ? fileinfoItems.getString(key) : item.getName());
					}*/
					String fileId = HWUnits.getFileId(con) , fileName = base + File.separator + item.getName() , phyFileid = "" , filetype = "" , filepath = "" , fileURI = "" , fileSize = Long.toString(item.getSize());
					
					boolean hasPhysicalFile = false;
					String fileMD5 = HWUnits.getFileMD5Code(item.getInputStream()) , newfilename = "";
					
					String[] row = con.getRow("select p.phy_file_id from DIR_FILE_PHYSICAL p where p.file_md5 = ?" , new String[]{fileMD5});
					if(row != null && row.length >0){
						phyFileid = row[0];
						HWUnits.addPhysicalFileCount(con, phyFileid);
						hasPhysicalFile = true;
					}
					int pos=-1;
					filetype = (pos = fileName.lastIndexOf(".")) != -1 ? fileName.substring(pos + 1) : "unknown"; //文件类型
					
					if(!hasPhysicalFile){
						filepath = base + toHexString(uuid.substring(uuid.length()-2, uuid.length()).getBytes())+File.separator;
						File filep = new File(filepath);
						if (!(filep.exists()))
							filep.mkdirs();
						newfilename = filepath + uuid.substring(0,uuid.length()-2);			    
						fileURI = "file:" + newfilename;
						phyFileid = UUID.randomUUID().toString();
						con.exec("insert into DIR_FILE_PHYSICAL values(?,?,?,?,?,?,?,?,?)", new String[]{phyFileid,spaceId,fileURI,fileMD5,item.getName(),fileSize,filetype,"1",""});
						item.write(new File(newfilename));
					}	

					//模拟模块保存。
					CustomizeObject custmizeObject = null;
					try {
						con.setAutoCommit(false);
						
						String nodeId = p.getString("NODE_ID");
						if(nodeId==null || nodeId.equals("")){
							nodeId = p.getString("exportData");	
						}
						
						
						if(nodeId!=null && !nodeId.equals("")){
							nodeId = nodeId.split("::")[0];
						}
						HWSpaceNode space = HWSpaceFactory.getSpaceById(spaceId);
						
						String base_dir = space.getDefaultDirId();	//空间默认节点id
						
						
						
						String dirId = "";					//目录
						
						String getDirsql="select P_NODE_ID from DIR_NODE_INFO where NODE_ID=?";
						boolean boo=true;
						String node_id=nodeId;       //循环用节点id;
						while (boo) {
							String[][] rs= con.get(getDirsql, new String[]{node_id});
							if(rs!=null && rs.length>0 && !rs[0][0].equals("")){
								dirId=dirId.equals("")?rs[0][0]:rs[0][0]+"/"+dirId;
								node_id=rs[0][0];
							}else{
								break;
							}
						}
						
						if(dirId.equals("")){
							dirId=spaceId+"/"+base_dir+"/"+nodeId;
						}else{
							dirId=spaceId+"/"+base_dir+"/"+dirId+"/"+nodeId;
						}
						
						String scrq=p.getString("REGION_ID");
						scrq=scrq.trim();
						if(scrq==null || scrq.equals("") || scrq.equals("undefined")){
							p.set("REGION_ID", dateFormat.format(new Date()));
						}
						
						p.set("FILE_ID", fileId);
						p.set("PHY_FILE_ID",phyFileid);
						p.set("FILE_NAME", item.getName());
						p.set("FILE_TYPE", filetype);
						p.set("FILE_SIZE", fileSize);
						p.set("SPACE_ID", spaceId);
						p.set("NODE_ID",nodeId);
						p.set("FILE_DIR",dirId);
						p.set("ATT_128","0");
						
						CustomizeFactory.remove(objectId);
						custmizeObject = CustomizeFactory.getCustomizeObject(p, CustomizeType, objectId);
						((Input) custmizeObject).save(p);
						
						String insreview="insert into DIR_DATUM_FILE_REVIEWED values(?,?,?,?,?,null)";
						con.exec(insreview,new String[]{fileId,"","0","",""});
						
						HWUnits.UploadFileLog(con, fileId, p.getString("FILE_INFO_NAME"), userId, nodeId, space.getSpaceId());
						con.commit();
						//System.out.println("操作:" + (p.have("newDataId") ? "保存成功":"未保存"));
					} catch (Exception e) {
					e.printStackTrace();
						jacper.print("{'success':false,'message':'上传过程出现错误。'}");
						return;
					}
					
					//HWUnits.statisticalIntegral(con, fileSize, userId);
					//SearchRunningQueue.add(new HWTaskWorkUserOpt(fileId  , userId , jacper.getRequest().getRemoteAddr()));
					
					con.commit();
					if(!hasPhysicalFile){
						System.out.println("HWFileupload.jcp -205- addRQ:" + phyFileid);
						HWDefaultRunningQueue.add(new HWTaskWork2PDF(phyFileid, newfilename, filetype));
					}
				}
			}
			//此处不发送邮件 ， 邮件按时发送。
			//System.out.println("<<<文件上传结束");
			jacper.print("{'success':true,'message':'上传成功。'}");
		}catch (Exception e) {
			try {
				con.rollback();
			} catch (Exception ecc) {
				ecc.printStackTrace();
			}
			e.printStackTrace();
			jacper.print("{'success':false,'message':'上传过程出现错误。'}");
		}finally { 
			try {
				con.setAutoCommit(true);
			} catch (Exception ecc) {
				ecc.printStackTrace();
			}
			con.close();
		} 
	}

	public String toHexString(byte[] b)
	{
		StringBuffer buffer = new StringBuffer();
		for (int i = 0; i < b.length; ++i)
		{
			buffer.append("0x");
			buffer.append(toHexString(b[i]));
			//buffer.append(" ");
		}
		return buffer.toString();
	}

	public String toHexString(byte b)
	{
		char[] buffer = new char[2];
		buffer[0] = Character.forDigit((b >>> 4) & 0x0F, 16);
		buffer[1] = Character.forDigit(b & 0x0F, 16);
		return new String(buffer);
	}
}