

import com.kinglib.*;
import com.kinglibx.query.*;
import java.util.*;
import com.kinglib.util.*;
import com.kinglib.bi.*;
import com.susing.core.KingleSystem;
import com.kinglib.util.json.*;

@class{

	public void doGet(Jacper jacper){
		Connection conPlat = jacper.getConnection("plat");

		boolean isLogin = jacper.setSession();
		HttpSession hs = jacper.getSession();

		String parent_id = jacper.getStr("parent_id");
		String schedule_id = jacper.getStr("schedule_id");
		String[] param=null;

		if(parent_id.equals("1")||parent_id.equals("2")){
			if(parent_id.equals("1")){	
				int dbType=conPlat.getType();
				ArrayList paramList =new ArrayList();
				paramList.add(jacper.trans("备份目录"));
				 if(dbType==com.susing.EasyConnection.ORACLE||dbType==com.susing.EasyConnection.POSTGRESQL){
					paramList.add(jacper.trans("备份程序目录"));
					paramList.add(jacper.trans("平台库连接串"));
					paramList.add(jacper.trans("认证库连接串"));
					paramList.add(jacper.trans("外援库连接串"));
					paramList.add(jacper.trans("流程库连接串"));
				}else if(dbType==com.susing.EasyConnection.MYSQL){}
				param=new String[paramList.size()];
				paramList.toArray(param);
				param=Arr.distinct(param);
			}else if(parent_id.equals("2")){	
				int dbType=conPlat.getType();
				ArrayList paramList =new ArrayList();
				paramList.add(jacper.trans("备份目录"));
				if(dbType==com.susing.EasyConnection.ORACLE||dbType==com.susing.EasyConnection.POSTGRESQL){
					paramList.add(jacper.trans("备份程序目录"));
					String[] arr= KingleSystem.getConnectionNames();																		
					for(int i=0;i<arr.length;i++){
						if(arr[i].equals("plat") || arr[i].equals("work")|| arr[i].equals("cert")|| arr[i].equals("utils")) continue;
							paramList.add(arr[i]+jacper.trans("连接串"));
					}
				}else if(dbType==com.susing.EasyConnection.MYSQL){}
				param=new String[paramList.size()];
				paramList.toArray(param);
				param=Arr.distinct(param);
			}
		}else{
			String taskType="0";
			taskType=conPlat.getRow("select task_method from $[plat].sys_task where task_id=?",new String[]{parent_id})[0];
			if(taskType.equals("3")||taskType.equals("4")){
				String[][] prgBase=conPlat.get("select tab_id,query_id,index_id from $[plat].ctrl_tabquery  where object_id=?",new String[]{parent_id},0);		
				String queryId="";
				if(prgBase.length>0){
				   String[][] scolum=null;
				   ArrayList scolumList =new ArrayList();
				   int totalNum=0;
					for(int i=0;i<prgBase.length;i++){
						String query_id=prgBase[i][1];		
						QueryExtendFactory queryEF=QueryExtendFactory.getInstance();
						QueryExtend QE=queryEF.getQueryExtend(conPlat,query_id);
						QuerySearch qs=QE.getQuerySearch(conPlat,true);
						scolum=qs.getSearchColum();		
						if(scolum.length>0){	
							 for(int j=0;j<scolum.length;j++){
								 if(scolum[j].length!=0){
									 totalNum++;
									scolumList.add(scolum[j]);
								}
							 }
						}
					}

					String[][] scolumArray=new String[totalNum][];
					scolumList.toArray(scolumArray);
					
					ArrayList list = new ArrayList();
					ArrayList list1 = new ArrayList();
					ArrayList list2 = new ArrayList();

					for(int i=0;i<scolumArray.length;i++){
						if(!list1.contains(scolumArray[i][0])&&!list2.contains(scolumArray[i][1])){
							list1.add(scolumArray[i][0]);
							list2.add(scolumArray[i][1]);
							list.add(scolumArray[i]);
						}
					}

					String[][] arr  = new String[list.size()][];
					list.toArray(arr);
					param=new String[arr.length];
					for(int j=0;j<arr.length;j++){
						param[j]=arr[j][1]; 
					}
				}
			}else if(taskType.equals("1")){		
				Object[] logicContent=conPlat.getLarge("select content from $[plat].ctrl_logic  where CTRL_ID=?",new String[]{parent_id});	
				if(logicContent!=null){
					String contentString=logicContent[0].toString();
					String paramString=contentString.substring(contentString.indexOf("(")+1,contentString.indexOf(")"));
					param=paramString.split(",");
					if(conPlat.getType()==com.susing.EasyConnection.ORACLE){
						for(int i=0;i<param.length;i++){
							String tempString=param[i].toLowerCase();
							param[i]=param[i].substring(0,tempString.indexOf("in"));
						}
					}
				}
			}else if(taskType.equals("2")){		
				Object[] logicContent=conPlat.getLarge("select script_content from $[plat].app_script  where module_id=?",new String[]{parent_id});		
				if(logicContent!=null){
					String content=logicContent[0].toString();
					ArrayList paramList =new ArrayList();
					String[] temp=null;
					content=content.replaceAll("\n","");
					temp=Search.splitKey(content,"jacper.getString(\"",");");	
					for(int i=0;i<temp.length;i++){
						if(i%2!=0){
							if(temp[i].indexOf(",")!=-1){
								paramList.add(temp[i].split(",")[0].replaceAll("\"",""));
							}else{
								paramList.add(temp[i].replaceAll("\"",""));
							}
						}
					}
					temp=Search.splitKey(content,"jacper.getInt(\"",");");	
					for(int i=0;i<temp.length;i++){
						if(i%2!=0){
							paramList.add(temp[i].split(",")[0].replaceAll("\"",""));
						}
					}
					temp=Search.splitKey(content,"jacper.getDouble(\"",");");	
					for(int i=0;i<temp.length;i++){
						if(i%2!=0){
							paramList.add(temp[i].split(",")[0].replaceAll("\"",""));
						}
					}
					param=new String[paramList.size()];
					paramList.toArray(param);
					param=Arr.distinct(param);
				}
			}else if(taskType.equals("6")){	
			
				String[][] prgBase=conPlat.get("select query_id,content from $[plat].CTRL_NOTIFY  where object_id=?",new String[]{parent_id},0);		
				ArrayList paramList =new ArrayList();

				if(prgBase!=null){
					String queryId="";
					if(prgBase!=null) queryId=prgBase[0][0];
					Query query = QueryFactory.getInstance().getQuery(conPlat,queryId);
					ParamNode[] params=query.getParamNode();
					param=new String[params.length];
					for(int j=0;j<params.length;j++) {
						paramList.add(params[j].getParamName());
					}
				}
				String[] queryArray=getQueryArray(prgBase[0][1]);
				for(int i=0;i<queryArray.length;i++){
					Query query = QueryFactory.getInstance().getQuery(conPlat,queryArray[i]);
					ParamNode[] params=query.getParamNode();
					param=new String[params.length];
					for(int j=0;j<params.length;j++) {
						paramList.add(params[j].getParamName());
					}
				}
				param=new String[paramList.size()];
				paramList.toArray(param);
				param=Arr.distinct(param);
			}
		}

		jacper.getResponse().setContentType("application/x-json");		
		try{
				JSONObject paramsJSON = new JSONObject("{}");
				JSONArray paramsJSONArray=new JSONArray();
				if(param!=null){
					for ( int i=0;i<param.length; i++ ) {
						JSONObject tempJSON = new JSONObject("{}");
						String paremValue="";
						String[] valueArray=conPlat.getRow("select task_param_value from $[plat].sys_task_param  where task_id=? and schedule_id=? and task_param_name=?",new String[]{parent_id,schedule_id,param[i]});
						if(valueArray!=null&&valueArray.length!=0){
							paremValue=valueArray[0];
							tempJSON.put(param[i],paremValue);
						}else{
							tempJSON.put(param[i],"");
						}
						paramsJSONArray.put(tempJSON);
					}
				}
				paramsJSON.put("paramsArray",paramsJSONArray);
				<?[?>paramsJSON.toString()<?]?>;
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			conPlat.close();
		}
}
public void doPost(Jacper jacper){	

	Connection conPlat = jacper.getConnection("plat");
	
	String parent_id = jacper.getStr("parent_id");
	String schedule_id = jacper.getStr("schedule_id");
	String[] key = jacper.getArray("key");
	String[] value = jacper.getArray("field");

	try{	
			conPlat.exec("delete from $[plat].sys_task_param where schedule_id=?",new String[]{schedule_id});
		for (int i=0; i<key.length; i++ ){
		    key[i]=key[i].replaceAll(" ","");
			conPlat.exec("insert into $[plat].sys_task_param (task_id,schedule_id,task_param_name,task_param_value) values (?,?,?,?)",new String[]{parent_id,schedule_id,key[i],value[i]});
		}
		<?{success:true}?>;
	}catch(Exception e){
		<?{success:false,message:"?>e.toString()<?"}?>;
	}finally{
		conPlat.close();
	}
}	
public String[] getQueryArray(String content){
	      	String[] temp=null;
			temp=Search.splitKey(content,"${","}");	
			ArrayList QueryList =new ArrayList();
			for(int i=0;i<temp.length;i++){
				if(i%2!=0){
					String reportObject=temp[i].substring(0,temp[i].indexOf("_"));
					String reportIdString=temp[i].substring(temp[i].indexOf("_")+1,temp[i].length());					
					if(reportObject.equals("Query")){
						String id=reportIdString.substring(0,reportIdString.indexOf("."));
						QueryList.add(id);
					}
				}
		    }
		String[] queryArray=new String[QueryList.size()];
		QueryList.toArray(queryArray);
		queryArray=Arr.distinct(queryArray);
		return queryArray;
	}
}