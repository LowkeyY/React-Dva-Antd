import com.kinglib.Connection;
import com.kinglib.Jacper;
import com.kinglib.workbench.ObjectManager;
import com.kinglib.workbench.ObjectNode;
import com.kinglib.workbench.ObjectType;
import com.kinglib.workbench.system.Sys;
import com.kinglib.workbench.system.SysFactory;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.servlet.http.HttpServletResponse;

import com.susing.core.KingleSystem;

@class{

	public static String webPath = (String) KingleSystem.getProperty("js_lib");

	public void doGet(Jacper jacper) {
		Connection conPlat = jacper.getConnection("plat");
		String object_id = jacper.getStr("id");
		String type = jacper.getStr("type");

		StringBuffer sb = new StringBuffer();

		String sysName = "";
		String sysVersion = "";

		if (type.equals("0")) {
			sysName = jacper.getStr("sysName");
			sysVersion = jacper.getStr("sysVersion");
			HttpServletResponse res = jacper.getResponse();
			res.setHeader("Content-Disposition", "attachment;filename=" + sysName + sysVersion + ".zip");
			res.setContentType("application/zip");
			if (sb.length() == 0)
				sb.append("<" + "?xml version=\"1.0\" encoding=\"utf-8\"?" + ">");
			sb.append("\n<iworkbench>");
		}
		ObjectNode systemNode = null;
		try {
			conPlat.setAutoCommit(false);
			systemNode = ObjectManager.getObject(object_id);
			sb = systemNode.toXML(conPlat, sb);
			conPlat.commit();
		} catch (Exception e) {
			try {
				conPlat.rollback();
			} catch (Exception e1) {
				e.printStackTrace();
			}
			e.printStackTrace();
		} finally {
			try {
				conPlat.setAutoCommit(true);
			} catch (Exception e2) {
			}
		}
		if (type.equals("0")) {
			sb.append("</iworkbench>");
			try {
				HttpServletResponse res = jacper.getResponse();
				ZipOutputStream zipOut = new ZipOutputStream(res.getOutputStream());
				zipOut.putNextEntry(new ZipEntry("SQL/"));
				zipOut.putNextEntry(new ZipEntry("IMPORT/"));
				zipOut.putNextEntry(new ZipEntry("IMPORT/" + sysName + sysVersion + ".xml"));
				byte[] b = sb.toString().getBytes("UTF-8");
				zipOut.write(b);
				zipOut.putNextEntry(new ZipEntry("ANT/"));
				if (systemNode != null) {
					zipOut.putNextEntry(new ZipEntry("ANT/App/"));
					addAppDirectory(zipOut, systemNode, conPlat, "ANT/App");
				}
				zipOut.putNextEntry(new ZipEntry("UPDATE/"));
				zipOut.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 增加application的目录.
	 */
	private void addAppDirectory(ZipOutputStream zipOut, ObjectNode systemNode, Connection conPlat, String parentPath)
			throws IOException {
			ArrayList<String> al = new ArrayList<String>();
			SysFactory sysFactory = SysFactory.getInstance();
			String sysId=systemNode.getId();
			Sys sys=sysFactory.getInstance().getSys(conPlat,sysId);
			String path=sys.getSystemPname();
			File dir = new File(webPath+File.separatorChar+"usr"+File.separatorChar+path);
			if (dir.isDirectory() && dir.exists()) {
				zipDir(zipOut, dir, parentPath);
			}
			zipOut.putNextEntry(new ZipEntry("ANT/BUILD.XML"));
			String xml="<"+"?xml version=\"1.0\" ?"+">\n<project name =\"installFile\" default =\"copyApp\">\n<target  name=\"copyApp\">\n<copy todir=\"${runtime.dir}\">\n<fileset dir=\"App/\"/>\n</copy>\n</target>\n</project>";
			zipOut.write(xml.getBytes("UTF-8"));
	}

	/**
	 * 打包目录
	 */
	private void zipDir(ZipOutputStream zipOut, File dir, String parentPath) throws IOException {
		zipOut.putNextEntry(new ZipEntry(parentPath + getZipFileName(dir)+"/"));
		for (File f : dir.listFiles()) {
			if (f.isDirectory()) {
				zipDir(zipOut, f, parentPath);
			} else {
				zipOut.putNextEntry(new ZipEntry(parentPath + getZipFileName(f)));
				byte[] b = new byte[102400];
				FileInputStream fin = new FileInputStream(f);
				int bytes = 0;
				while ((bytes = fin.read(b)) != -1) {
					zipOut.write(b, 0, bytes);
				}
				fin.close();
			}
		}

	}

	/**
	 * 获取文件名
	 * 
	 * @throws IOException
	 */
	private String getZipFileName(File dir) throws IOException {
		return dir.getCanonicalPath().substring(webPath.length());
	}


}