import com.kinglib.HttpSession;
import com.kinglib.Jacper;
import com.kinglib.JacperFile;
import com.kinglib.ui.core.utils.Param;
import com.kinglib.ui.program.RichEditorAssistant;
import com.kinglib.util.Files;
import com.kinglib.util.RichEditorTempFileManager;

import java.io.IOException;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletResponse;

import com.susing.EFile;
import com.susing.upload.FileExtend;
import com.susing.upload.FileUpload;

@class{

	public void doPost(Jacper jacper) {

		if (FileUpload.isMultipartContent(jacper.getRequest().getContentType())) {
			jacper = new JacperFile(jacper);
			((JacperFile) jacper).action();
		}
		
		HttpSession hs = jacper.getSession();
		EFile uf = ((JacperFile) jacper).getFile("upload");
		String CKEditorFuncNum = jacper.getString("CKEditorFuncNum");
		String editorId=jacper.getString("CKEditor");
		
		String fileId = RichEditorTempFileManager.getInstance().add(hs.uid,editorId,uf);
		jacper.print("<script type=\"text/javascript\">window.parent.CKEDITOR.tools.callFunction(" + CKEditorFuncNum
				+ ", '/lib/RichEditor/file.jcp?id=" + fileId + "', '');</script>");
	}

	public void doGet(Jacper jacper) {

		HttpSession hs = jacper.getSession();

		String id = jacper.getString("id");
		EFile uf = null;
		if(id.length()==72){
			Param p=new Param(jacper);
			uf=RichEditorAssistant.getDBFile(p,id);
			p.closeAllConnection(); 
		}else{
			uf=RichEditorTempFileManager.getInstance().getFile(hs.uid,id);
		}
		if(uf==null){
			jacper.setError("文件不存在");
			return;
		}

		String fileName=uf.getAttribute("file-name");
		HttpServletResponse res = jacper.getResponse();
		res.setContentType(FileExtend.getContentType(fileName));
		if(Pattern.compile("[\\ \\(\\)]", Pattern.CASE_INSENSITIVE).matcher(fileName).find() && FileExtend.getSuffix(fileName).length() > 0)
			fileName = id +"."+ FileExtend.getSuffix(fileName);
		res.setHeader("Content-Disposition", "attachment;filename=" +fileName );
		res.setHeader("Content-Length", uf.length() + "");
		res.setHeader("Accept-ranges", "bytes");
		try {
			Files.copyRange(uf.getInputStream(), res.getOutputStream(), 2048);
		} catch (IOException ioe) {
			return;
		}
	}
}