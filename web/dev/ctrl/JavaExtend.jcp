import com.kinglib.Connection;
import com.kinglib.Jacper;
import com.kinglib.ui.core.CustomizeFactory;
import com.kinglib.ui.core.utils.Param;
import com.kinglib.util.json.JSONPart;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.sun.tools.javac.Main;
import com.susing.EFile;
import com.susing.core.KingleSystem;

@class{


	public void doGet(Jacper jacper) {
		String objectId = jacper.getStr("objectId");
		Connection conPlat = jacper.getConnection("plat");
		JSONPart json = new JSONPart();
		try {
			String code;
			Object[] c = conPlat.getLarge("select code from $[plat].ctrl_event where object_id=?",
					new String[] { objectId });
			if (c == null || c.length < 1) {
				code = "import com.kinglib.*;\nimport com.kinglib.util.json.*;\nimport com.kinglib.ui.core.utils.Param;\nimport com.kinglib.ui.program.ProgramEventCustomExtension;\nimport com.kinglib.util.event.Event;\nimport com.kinglib.util.event.Listener;\n\npublic class "
						+ getClassName(objectId)
						+ " extends ProgramEventCustomExtension {\n	@Override\n	public void initializeEvent() {\n		this.on(\""+jacper.trans("此处填写事件名称")+"\", new Listener() {\n\n			@Override\n			public void handleEvent(Event event) {\n				// TODO "+jacper.trans("此处编写事件响应程序.")+"\n\n			}\n		});\n\n	}\n\n}\n";
			} else {
				code = c[0].toString();
			}
			json.join("data", code);
			json.join("success", true);
		} catch (Exception e) {
			json.join("success", false);
			json.join("reason", e.getMessage());
			e.printStackTrace();
		} finally {
			conPlat.close();
		}
		jacper.print(json);
	}

	public void doDelete(Jacper jacper) {
		Param param = new Param(jacper);
		String objectId = param.getStr("objectId");
		Connection conPlat = param.getConnection("plat");
		try {
			conPlat.exec("delete from $[plat].ctrl_event where object_id=?", new String[] { objectId });
			conPlat.exec("update  $[plat].prg_base set event_name=null where object_id=?", new String[] { objectId });
			jacper.print("{success:true}");
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			param.closeAllConnection();
			CustomizeFactory.remove(objectId);
		}

	}

	public void doPut(Jacper jacper) {
		Param param = new Param(jacper);
		String objectId = param.getStr("objectId");
		String data = param.getStr("data");
		JSONPart json = new JSONPart();
		try {
			String name = getClassName(objectId);
			String tmp = KingleSystem.getTempDirectory();
			EFile target = new EFile(tmp + File.separator + name + ".class");
			EFile source = new EFile(tmp + File.separator + name + ".java");
			OutputStreamWriter fr = null;
			try {
				fr = new OutputStreamWriter(new FileOutputStream(source.getFile()), "UTF-8");
				fr.write(data);
			} finally {
				if (fr != null)
					fr.close();
			}
			String err = compile(source, target);
			if (err == null) {
				json.join("success", true);
			} else {
				json.join("success", false);
				json.join("reason", err);
			}
			source.getFile().delete();
			target.getFile().delete();
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			CustomizeFactory.remove(objectId);
		}
		jacper.print(json);
	}

	public void doPost(Jacper jacper) {
		String objectId = jacper.getStr("objectId");
		String data = jacper.getStr("data");
		Connection conPlat = jacper.getConnection("plat");
		JSONPart json = new JSONPart();
		try {

			String name = getClassName(objectId);
			String tmp = KingleSystem.getTempDirectory();
			EFile target = new EFile(tmp + File.separator + name + ".class");
			EFile source = new EFile(tmp + File.separator + name + ".java");
			OutputStreamWriter fr = null;
			try {
				fr = new OutputStreamWriter(new FileOutputStream(source.getFile()), "UTF-8");
				fr.write(data);
			} finally {
				if (fr != null)
					fr.close();
			}

			String err = compile(source, target);
			if (err == null) {
				conPlat.exec("delete from $[plat].ctrl_event where object_id=?", new String[] { objectId });
				int i = 1;
				while (target.getFile().exists()) {
					Object[] args = { objectId,data, target,
							i == 1 ? "ProgramEventCustomExtension" : "Listener" };
					conPlat.execLarge(
							"insert into $[plat].ctrl_event(object_id,code,binary,class_name)values(?,?,?,?)", args);
					target.getFile().delete();
					target = new EFile(tmp + File.separator + name + "$" + i + ".class");
					i++;
				}

				StringBuilder sb = new StringBuilder(",");
				Pattern pattern = Pattern.compile("this\\.on\\(\\s*\"(.*)\"");
				Matcher matcher = pattern.matcher(data);
				while (matcher.find()) {
					sb.append(matcher.group(1)).append(",");

				}
				conPlat.exec("update  $[plat].prg_base set event_name=? where object_id=?", new String[] {
						sb.toString(), objectId });

				json.join("success", true);

			} else {
				json.join("success", false);
				json.join("reason", err);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			conPlat.close();
			CustomizeFactory.remove(objectId);
		}
		jacper.print(json);
	}

	private String compile(EFile javaFile, EFile classFile) throws Exception {
		StringBuffer tmpPath = new StringBuffer();
		ClassLoader loader = getClass().getClassLoader();
		while (loader != null) {
			if (loader instanceof URLClassLoader) {
				URL[] urls = ((URLClassLoader) loader).getURLs();
				for (int i = 0; i < urls.length; i++) {
					try {
						tmpPath.append((new File(urls[i].getFile())).getCanonicalPath());
						tmpPath.append(File.pathSeparator);
					} catch (IOException e) {
					}
				}
			} else
				System.out.println(loader);
			loader = loader.getParent();
		}

		ByteArrayOutputStream buf = new ByteArrayOutputStream();
		PrintWriter p = new PrintWriter(buf);
		String[] compileArgs = { javaFile.getFile().getCanonicalPath(), "-encoding", "UTF-8", "-d",
				classFile.getFile().getParent(), "-classpath", tmpPath.toString() };

		int status = Main.compile(compileArgs, p);
		p.close();
		if (status != 0 && buf.size() > 0) {
			return new String(buf.toByteArray());
		}
		return null;
	}

	private static String getClassName(String id) {
		return "C" + id.replaceAll("-", "");
	}


}