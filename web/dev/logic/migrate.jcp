
import java.io.IOException;
import java.util.HashSet;
import com.kinglib.*;
import com.kinglib.database.*;
import com.kinglib.workbench.*;
import com.kinglib.workbench.application.*;
import com.kinglibx.query.*;
import com.kinglib.util.json.*;
@class{

	private String getJson(String[][] data,String[] columns){
		if(data==null) return "";
		JSONArray jarr=new JSONArray();
		try{
			for(int i=0;i<data.length;i++){
				JSONObject items = new JSONObject();
				for(int j=0;j<columns.length;j++){
					if(j>5){
						items.put(columns[j],new JSONValue(data[i][j]));
					}else{
						items.put(columns[j],data[i][j]);
					}
				}
				jarr.put(items);
			}
		}catch(Exception e){}
		return "{items:"+jarr+"}";
	}

	private String getJson(String[] data,String[] columns){
		if(data==null) return "";
		JSONArray jarr=new JSONArray();
		try{
			for(int i=0;i<data.length;i++){
				JSONObject items = new JSONObject();
				for(int j=0;j<columns.length;j++)
					items.put(columns[j],data[i]);
				jarr.put(items);
			}
		}catch(Exception e){}
		return "{items:"+jarr+"}";
	}

	public void doPost(Jacper jacper){
		String gettype=jacper.getStr("type");
		Connection conPlat = jacper.getConnection("plat");
		boolean isLogin = jacper.setSession();
		HttpSession hs = jacper.getSession();
		String object_id = jacper.getStr("object_id");
		String json="";

		if(gettype.equals("query_column")){
			json=getQueryColumn(jacper.getStr("query_id"),conPlat);
		}else if(gettype.equals("get_tables")){
			String database_link=jacper.getStr("database_link");
			String[][] tab = conPlat.get("select object_id,lname from $[plat].meta_table where DBLINK=?",new String[]{database_link},0);
			json=getJson(tab,new String[]{"id","lname"});
		}else if(gettype.equals("get_links")){
			ObjectManager OM=ObjectManager.getInstance();
			ObjectNode systemNode=OM.getObject(object_id).upTo(ObjectType.SYSTEM);
			ObjectNode[] groupNodes=systemNode.getChilds(ObjectType.APPLICATIONGROUP);
			HashSet dbLinkSet=new HashSet();
			for(int j=0;j<groupNodes.length;j++){
				 ObjectNode[] appNodes=groupNodes[j].getChilds(ObjectType.APPLICATION);
				for(int k=0;k<appNodes.length;k++){
					 String appId=appNodes[k].getId();
					 ApplicationFactory appFactory=ApplicationFactory.getInstance();
					 Application app=appFactory.getApplication(conPlat,appId+"");
					 String dbLink=app.getDatabaseLink();
					dbLinkSet.add(dbLink);
				}
			}
			String[] database_Link=new String[dbLinkSet.size()];
			dbLinkSet.toArray(database_Link);
			json=getJson(database_Link,new String[]{"text"});
		}else if(gettype.equals("get_querys")){
			String[][] queryList= conPlat.get("select query_name,query_id from $[plat].app_query  where query_id is not null and (object_id is null or object_id not in (select object_id from $[plat].meta_table)) order by query_name",new String[]{},0);
			json=getJson(queryList,new String[]{"text","value"});
		}else if(gettype.equals("get_migrate")){
			json=getMigrate(conPlat,object_id,jacper.getStr("index_id"),jacper.getStr("tab_id"));
		}else if(gettype.equals("ctrl_tabquery")){
			String[][] ryan1 = conPlat.get("SELECT a.index_id, a.dblink,b.lname,c.query_name,a.query_id,a.tab_id,'','' FROM $[plat].ctrl_tabquery a,$[plat].meta_table b,$[plat].app_query c where a.tab_id=b.object_id and a.query_id=c.query_id and a.object_id=?",new String[]{object_id},0);
			for(int i=0;i<ryan1.length;i++){
				ryan1[i][6]=getQueryColumn(ryan1[i][4],conPlat);
				ryan1[i][7]=getMigrate(conPlat,object_id,ryan1[i][0],ryan1[i][5]);
			}
			json=getJson(ryan1,new String[]{"index_id", "dblink","tab_lname","query_name","query_id","tab_id","query_data","grid_data"});
		}
		conPlat.close();
		jacper.print(json);
	}

	public String getQueryColumn(String query_id,Connection conPlat){
			Query query = QueryFactory.getInstance().getQuery(conPlat,query_id);
			ColumnNode[] columns = query.getColumnNode();
			String[][] rs2=new String[columns.length][2];
			for(int i=0;i<columns.length;i++)
				rs2[i][0]=rs2[i][1]=columns[i].getColumnName();
			return getJson(rs2,new String[]{"text","value"});
	}

	public String getMigrate(Connection conPlat,String object_id,String index_id,String tab_id){
			String[][] transValue = conPlat.get("select a.source_column,b.id,b.lname,b.data_type,b.length,b.not_null,b.pname from $[plat].ctrl_transfer a right outer join $[plat].meta_column b  on a.tabitem_id=b.id and a.index_id=?  and a.module_id=? where b.OBJECT_ID=? order by a.seq",new String[]{index_id,object_id,tab_id},0);
			for(String[] row:transValue){
				row[2]=row[2]+"["+row[6]+"]";
				row[3]=DataType.parseDataType(row[3]).toString();
				row[5]=row[5].equals("true")?"<img src='/themes/icon/xp/check.gif'>":"";
			}
			return getJson(transValue,new String[]{"qname","id","lname","type","length","nullable"});
	}

}
